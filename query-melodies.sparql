PREFIX xyz: <http://sparql.xyz/facade-x/data/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX fx: <http://sparql.xyz/facade-x/ns/>
PREFIX mm:  <http://w3id.org/polifonia/ontology/music-meta/>
PREFIX mp:  <http://w3id.org/polifonia/ontology/music-projection/>
PREFIX mr:  <http://w3id.org/polifonia/ontology/music-representation/>
PREFIX core:  <http://w3id.org/polifonia/ontology/core/>
PREFIX tunes:  <http://w3id.org/polifonia/ontology/tunes/>
PREFIX src: <http://w3id.org/polifonia/ontology/source/>
PREFIX pon-resource: <http://w3id.org/polifonia/resource/tunes/>
PREFIX prov: <http://www.w3.org/ns/prov#>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
PREFIX owl: <http://www.w3.org/2002/07/owl#>

CONSTRUCT {
    ?melody_iri a mm:MusicEntity ;
        core:id ?melody_id ;  # add to ontology PVK: This is the ID of the song _in the collection_.
        rdfs:label ?melody_title ; #this needs a better solution.
        core:title ?melody_title_in_source ; #this needs a better solution.
        mm:hasComposer ?composer_iri ;
        core:description ?melody_description_url ; 
        core:isMemberOf ?collection_iri ;
        core:hasPart ?abstract_score_iri ;
        core:hasPart ?lyrics_iri ; #why is this both here and at abstract score?
        mm:isRealisedBy ?musical_performance_iri ;
        mm:isRecordedBy ?blank_recording_process ;
        src:hasSource ?source_iri ;
        # new blank node SourceSituation (reification)
        tunes:hasSourceIdentifiers ?blank_source_identifier ;
        core:isInvolvedIn ?blank_tf_membership ;
        core:isInvolvedIn ?blank_tf_var_membership .

    ?blank_source_identifier a tunes:SourceIdentifier ;
            tunes:hasSourceId ?melody_serial_number_in_source ;
            tunes:pageInSource ?melody_page_number_in_source .

    ?blank_tf_membership a tunes:CollectionMembership ;
        core:hasMembershipStrength ?tunefamily_confidence ; #neutral, weak, strong
        core:hasMember ?tunefamily_iri . #shouldn't this be the inverse of hasMember ?

    ?blank_tf_var_membership a tunes:CollectionMembership ;
        core:hasMembershipStrength ?tunefamily_variation_confidence ;
        core:hasMember ?melody_related_to_tunefamily_iri . #shouldn't this be the inverse of hasMember ?

    # Collection memberships
    ?source_iri src:hasSubject ?melody_iri .
    ?tunefamily_iri core:hasMember ?melody_iri .
    ?collection_iri core:hasMember ?melody_iri .

    # 
    ?abstract_score_iri a mm:AbstractScore ;
        mm:hasText ?lyrics_iri ; #We only have lyrics information for the entire song, and for the first stanza
        core:hasPart ?stanza_iri ;
        mm:isRealisedIn ?score_iri .

    ?score_iri a mm:Score ; 
        core:id ?score_id ;  # add to ontology
        core:title ?score_title ;  # add to ontology
        core:description ?score_description_url ;  # add to ontology
        mm:hasScorePart ?score_part_iri .
        # mm:hasPublicationSituation ?publication_iri . # this now is in the source objct. Why also include it here?

    ?stanza_iri a mm:CompositionPart, mm:Stanza ;
        core:id ?melody_stanza_id ;
        rdfs:label ?melody_stanza_number ;
        mm:isRealisedIn ?score_iri ; 
        core:isPartOf ?abstract_score_iri .

    ?score_part_iri a mm:ScorePart ;
        core:id ?melody_voice_id ;
        rdfs:label ?melody_voice_number ; # labels?
        rdfs:label ?part_type . # 'bass', 'melody', 'upper voice'
        # here also mm:isrealisedIn ?score_iri ? Otherwise it is not clear what melody belongs to this part.

    ?source_current_owner_iri a core:Agent ;
        core:id ?source_current_owner_id ;  # add to ontology
        core:name ?source_current_owner_name .

    ?lyrics_iri a mm:Text, mm:Lyrics ;
        core:hasText ?blank_text_fragment ;
        core:isMemberOf ?textfamily_iri .  

    ?blank_text_fragment a mm:TextFragment ;
        core:text ?melody_lyrics_first_line .

    ?musical_performance_iri a mm:MusicalPerformance, core:InformationRealization ;
        mm:isPerformedBy ?melody_singer_iri .

    ?blank_recording_process a mm:RecordingProcess ;
        mm:producesRecording ?recording_iri ;
        core:hasPlace ?blank_recording_place ;
        core:hasTimeInterval ?blank_recording_timeinterval .

    ?blank_recording_place a core:Place ;
            core:name ?melody_place_of_recording_name ;
            core:latitude ?melody_place_of_recording_latitude ;
            core:longitude ?melody_place_of_recording_longitude .

    ?blank_recording_timeinterval a core:TimeInterval ;
            core:date ?melody_date_of_recording .

    ?recording_iri a mm:Recording ;
        core:url ?melody_audio_url . #currently not present in data

}


WHERE {
    SERVICE <x-sparql-anything:> {

        fx:properties fx:location ?_filepath ;
            fx:media-type  "application/json" .
        
        ?base_root a fx:root ;
            ?melody_slot ?melody_base .
        
        # Required 
        ?melody_base 
            xyz:melody_iri ?melody_iri_temp ;
            xyz:melody_title ?melody_title .

        BIND(IRI(?melody_iri_temp) AS ?melody_iri)

        # Abstract Score
        BIND(IRI(concat(str(?melody_iri), "AbstractScore")) AS ?abstract_score_iri)
        # score
        BIND(IRI(concat(str(?melody_iri), "Score")) AS ?score_iri)

        OPTIONAL { ?melody_base xyz:melody_voice_number ?melody_voice_number . }
        OPTIONAL { ?melody_base xyz:melody_voice_id ?melody_voice_id . }
        BIND(IF(BOUND(?melody_stanza_number), IRI(concat(str(?melody_iri), 'part', ?melody_voice_number)), ?nothing) AS ?score_part_iri)

        OPTIONAL { ?melody_base xyz:melody_stanza_number ?melody_stanza_number . }
        OPTIONAL { ?melody_base xyz:melody_stanza_id ?melody_stanza_id . }
        BIND(IF(BOUND(?melody_stanza_number), IRI(concat(str(?melody_iri), 'stanza', ?melody_stanza_number)) , ?nothing) AS ?stanza_iri)

        OPTIONAL { ?melody_base xyz:melody_id ?melody_id . } #hasIdentifier?
        OPTIONAL { ?melody_base xyz:collection_iri ?collection_iri_temp . }
        BIND(IF(BOUND(?collection_iri_temp), IRI(?collection_iri_temp), ?nothing) AS ?collection_iri)
        OPTIONAL { ?melody_base xyz:melody_description_url ?melody_description_url . }
        OPTIONAL {
            ?melody_base xyz:melody_types ?melody_types_base .
            ?melody_types_base ?melody_type_slot ?melody_type .    
        }
        OPTIONAL { ?melody_base xyz:melody_title_in_source ?melody_title_in_source . }
        OPTIONAL {
            ?melody_base xyz:composers_iris ?composers_iris_base .
            ?composers_iris_base ?composer_slot ?composer_iri_temp .
        }
        BIND(IF(BOUND(?composer_iri_temp), IRI(?composer_iri), ?nothing) AS ?composer_iri)

        OPTIONAL { ?melody_base xyz:tunefamily_iri ?tunefamily_iri_temp . }
        BIND(IF(BOUND(?tunefamily_iri_temp), IRI(?tunefamily_iri_temp), ?nothing) AS ?tunefamily_iri)
        BIND(IF(BOUND(?tunefamily_iri_temp), fx:bnode(concat(str(?melody_iri), "tf")), ?nothing) as ?blank_tf_membership)
        OPTIONAL { ?melody_base xyz:melody_tunefamily_confidence ?tunefamily_confidence . }

        OPTIONAL { ?melody_base xyz:melody_related_to_tunefamily_iri ?melody_related_to_tunefamily_iri_temp . }
        BIND(IF(BOUND(?melody_related_to_tunefamily_iri_temp), IRI(?melody_related_to_tunefamily_iri_temp), ?nothing) AS ?melody_related_to_tunefamily_iri)
        BIND(IF(BOUND(?melody_related_to_tunefamily_iri_temp), fx:bnode(concat(str(?melody_iri), "vartf")), ?nothing) AS ?blank_tf_var_membership)
        BIND(IF(BOUND(?melody_related_to_tunefamily_iri_temp), "weak", ?nothing) AS ?tunefamily_variation_confidence)
    
        OPTIONAL { ?melody_base xyz:melody_lyrics_first_line ?melody_lyrics_first_line . }
        OPTIONAL { ?melody_base xyz:textfamily_iri ?textfamily_iri_temp . }
        BIND(IF(BOUND(?melody_lyrics_first_line), IRI(concat(str(?melody_iri), "lyrics")), ?nothing) AS ?lyrics_iri) #first line of first stanza
        BIND(IF(BOUND(?melody_lyrics_first_line), fx:bnode(concat(str(?melody_iri), "txtfrag")), ?nothing) AS ?blank_text_fragment) #first line of first stanza
        BIND(IF(BOUND(?textfamily_iri_temp), IRI(?textfamily_iri_temp), ?nothing) AS ?textfamily_iri)

        # Source
        OPTIONAL { ?melody_base xyz:source_iri ?source_iri_temp . }
        BIND(IF(BOUND(?source_iri_temp), IRI(?source_iri_temp), ?nothing) AS ?source_iri)

        OPTIONAL { ?melody_base xyz:source_id ?source_id . } #ignore. this is id in collection
        OPTIONAL { ?melody_base xyz:melody_serial_number_in_source ?melody_serial_number_in_source . }
        OPTIONAL { ?melody_base xyz:melody_page_number_in_source ?melody_page_number_in_source . }
        BIND (
            COALESCE(
                IF(BOUND(?melody_serial_number_in_source), "Y", 1/0),
                IF(BOUND(?melody_page_number_in_source), "Y", 1/0),
                ?nothing
            ) AS ?source_identifier_present
        )
        BIND(IF(BOUND(?source_identifier_present), fx:bnode(concat(str(?melody_iri), "si")), ?nothing) AS ?blank_source_identifier)

        OPTIONAL { ?melody_base xyz:melody_work_number ?melody_work_number . }
        OPTIONAL { ?melody_base xyz:melody_movement_number ?melody_movement_number . }
        OPTIONAL { ?melody_base xyz:melody_excerpt_number ?melody_excerpt_number . }
        OPTIONAL {
            ?melody_base xyz:melody_singers_iris ?melody_singers_iris_base .
            ?melody_singers_iris_base ?singer_slot ?melody_singer_iri_temp .
        }
        BIND(IF(BOUND(?melody_singer_iri_temp), IRI(?melody_singer_iri_temp), ?nothing) AS ?melody_singer_iri)
        OPTIONAL { ?melody_base xyz:melody_year_of_recording ?melody_year_of_recording . }
        OPTIONAL { ?melody_base xyz:melody_month_of_recording ?melody_month_of_recording . }
        OPTIONAL { ?melody_base xyz:melody_day_of_recording ?melody_day_of_recording . }
        OPTIONAL { ?melody_base xyz:melody_date_of_recording ?melody_date_of_recording . } # Y-M-D
        BIND(IF(BOUND(?melody_date_of_recording), fx:bnode(concat(str(?melody_iri), "recdate")), ?nothing) AS ?blank_recording_timeinterval)

        OPTIONAL { ?melody_base xyz:melody_place_of_recording_name ?melody_place_of_recording_name . }
        OPTIONAL { ?melody_base xyz:melody_place_of_recording_latitude ?melody_place_of_recording_latitude . }
        OPTIONAL { ?melody_base xyz:melody_place_of_recording_longitude ?melody_place_of_recording_longitude . }
        BIND (
            COALESCE(
                IF(BOUND(?melody_place_of_recording_name), "Y", 1/0),
                IF(BOUND(?melody_place_of_recording_latitude), "Y", 1/0),
                IF(BOUND(?melody_place_of_recording_longitude), "Y", 1/0),
                ?nothing
            ) AS ?recording_place_present
        )
        BIND(IF(BOUND(?recording_place_present), fx:bnode(concat(str(?melody_iri), "recplace")), ?nothing) as ?blank_recording_place)

        # Recording process
        BIND (
            COALESCE(
                IF(BOUND(?recording_place_present), "Y", 1/0),
                IF(BOUND(?melody_date_of_recording), "Y", 1/0),
                ?nothing
            ) AS ?recording_process_present
        )
        BIND(IF(BOUND(?recording_process_present), fx:bnode(concat(str(?melody_iri), "recprocess")), ?nothing) as ?blank_recording_process)
        BIND(IF(BOUND(?recording_process_present), IRI(concat(str(?melody_iri), "performance")), ?nothing) AS ?musical_performance_iri)

        OPTIONAL { ?melody_base xyz:melody_comment ?melody_comment . }

    }
}
